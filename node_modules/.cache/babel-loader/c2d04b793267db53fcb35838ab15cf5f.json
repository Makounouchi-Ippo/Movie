{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { API_KEY, PATH_BASE, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from '../../component/Utility/api';\nexport const movieBegin = () => {\n  return {\n    type: actionTypes.MOVIE_BEGIN\n  };\n};\nexport const movieSearchInput = (value, data, inputValue) => {\n  return {\n    type: actionTypes.MOVIE_SEARCH_INPUT,\n    movie: value,\n    data: data,\n    inputValue: inputValue\n  };\n};\nexport const moviePopular = value => {\n  return {\n    type: actionTypes.MOVIE_POPULAR,\n    movie: value\n  };\n};\nexport const InfiniteScrollMovie = (value, page) => {\n  return {\n    type: actionTypes.INFINITE_SCROLL,\n    movie: value,\n    page: page\n  };\n};\nexport const movieFiltre = (value, filtreValue, data) => {\n  return {\n    type: actionTypes.MOVIE_FILTRE,\n    movie: value,\n    data: data,\n    filtreValue: filtreValue\n  };\n};\nexport const clearMovie = error => {\n  return {\n    type: actionTypes.CLEAR_MOVIE,\n    error: error\n  };\n};\nexport const pageInitial = () => {\n  return {\n    type: actionTypes.PAGE_INITIAL\n  };\n};\nexport const movieShowDetail = (data, youtubeKey) => {\n  return {\n    type: actionTypes.MOVIE_DETAIL,\n    movieDetail: data,\n    youtubeKey_release: youtubeKey\n  };\n};\nexport const movieFail = error => {\n  return {\n    type: actionTypes.MOVIE_FAIL,\n    error: error\n  };\n};\nexport const movieSearch = (inputValue, idMovie) => {\n  return dispatch => {\n    dispatch(movieBegin());\n\n    if (inputValue === \"fetchDataPopular\") {\n      axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=1&include_adult=false`).then(response => {\n        //console.log('serchBUttun',response.data)\n        dispatch(moviePopular(response.data.results));\n      }).catch(err => {\n        dispatch(movieFail(err)); // console.log(err.response)\n      });\n    } else if (inputValue === \"showMovieDetail\") {\n      axios.get(`https://api.themoviedb.org/3/movie/${idMovie}?api_key=1e32f5c452c2267d5367589e9864ab1c&append_to_response=credits,videos,similar&language=fr&include_adult=false&vote_count.gte=200`).then(response => {\n        let date = {\n          date: response.data.release_date.substr(0, 4)\n        };\n        let youtube;\n        if (response.data.videos.results.length !== 0) youtube = {\n          youtube: response.data.videos.results[0].key\n        };\n        const returnedTarget = Object.assign(date, youtube);\n        dispatch(movieShowDetail(response.data, returnedTarget));\n      }).catch(err => {\n        dispatch(movieFail(err)); //  console.log(err.response)\n      });\n    } else {\n      axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}1${PATH_LANGUE}fr${PATH_ADULT}\"&query=${inputValue}&vote_count.gte=200`).then(response => {\n        // console.log('MovieSearchInput',response)\n        dispatch(movieSearchInput(response.data.results, response.data.total_results, inputValue));\n      }).catch(err => {\n        //console.log('eeeeee')\n        dispatch(movieFail(err));\n      });\n    }\n  };\n};\nexport const movieFiltres = filtreValue => {\n  //conso le.log(filtreValue)\n  let fetchApi = `https://api.themoviedb.org/3/discover/movie?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&include_adult=false&vote_count.gte=200`;\n\n  if (filtreValue.Genre.value) {\n    fetchApi = fetchApi + `&with_genres=${filtreValue.Genre.value}`;\n  }\n\n  if (filtreValue.SortBy.value) {\n    fetchApi = fetchApi + `&sort_by=${filtreValue.SortBy.value}`;\n  }\n\n  if (filtreValue.Years.value) {\n    fetchApi = fetchApi + `&primary_release_year=${filtreValue.Years.value}`;\n  }\n\n  return dispatch => {\n    dispatch(movieBegin());\n    axios.get(fetchApi).then(response => {\n      console.log('resposneFILTREEE', response);\n      dispatch(movieFiltre(response.data.results, filtreValue, response.data.total_results));\n    }).catch(err => {\n      dispatch(movieFail(err));\n      console.log('111', err.response);\n    });\n  };\n};\nexport const InfiniteScroll = (nameScrolling, index, valueInput, filtreValue) => {\n  //   console.log('filtreValue===>',filtreValue)\n  //console.log('iindex',index)\n  // console.log('value',valueInput)\n  // console.log('nameScrolling',nameScrolling);\n  let fetchApi = `https://api.themoviedb.org/3/discover/movie?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=${index}&include_adult=false&vote_count.gte=200`;\n\n  if (filtreValue.Genre.value) {\n    fetchApi = fetchApi + `&with_genres=${filtreValue.Genre.value}`;\n  }\n\n  if (filtreValue.SortBy.value) {\n    fetchApi = fetchApi + `&sort_by=${filtreValue.SortBy.value}`;\n  }\n\n  if (filtreValue.Years.value) {\n    fetchApi = fetchApi + `&primary_release_year=${filtreValue.Years.value}`;\n  }\n\n  return dispatch => {\n    dispatch(movieBegin());\n\n    switch (nameScrolling) {\n      case 'popular':\n        axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=${index}&include_adult=false`).then(response => {\n          // console.log('page ====',index)\n          // console.log('reponse page',response)\n          dispatch(InfiniteScrollMovie(response.data.results, index));\n        }).catch(err => {\n          dispatch(movieFail(err)); //console.log(err.response)\n        });\n        break;\n\n      case 'searchInput':\n        axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${index}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${valueInput}&include_adult=false&vote_count.gte=200`).then(response => {\n          // console.log('page ====',index)\n          // console.log('reponse page',response)\n          dispatch(InfiniteScrollMovie(response.data.results, index));\n        }).catch(err => {\n          // console.log('eeeeee')\n          dispatch(movieFail(err));\n        });\n        break;\n\n      case 'filtre':\n        axios.get(fetchApi).then(response => {\n          // console.log('pageeee === ',index)\n          // console.log('resposne', response)\n          dispatch(InfiniteScrollMovie(response.data.results, index));\n        }).catch(err => {\n          dispatch(movieFail(err)); //console.log(err.response)\n        });\n        break;\n\n      default: //  console.log(\"Type de recherche Inconnuuuuuuu\");\n\n    }\n  };\n};","map":{"version":3,"sources":["/Users/mehel-ka/Downloads/netflix/src/store/actions/movieSearch.js"],"names":["actionTypes","axios","API_KEY","PATH_BASE","PATH_MOVIE","PATH_SEARCH","PATH_PAGE","PATH_ADULT","PATH_LANGUE","movieBegin","type","MOVIE_BEGIN","movieSearchInput","value","data","inputValue","MOVIE_SEARCH_INPUT","movie","moviePopular","MOVIE_POPULAR","InfiniteScrollMovie","page","INFINITE_SCROLL","movieFiltre","filtreValue","MOVIE_FILTRE","clearMovie","error","CLEAR_MOVIE","pageInitial","PAGE_INITIAL","movieShowDetail","youtubeKey","MOVIE_DETAIL","movieDetail","youtubeKey_release","movieFail","MOVIE_FAIL","movieSearch","idMovie","dispatch","get","then","response","results","catch","err","date","release_date","substr","youtube","videos","length","key","returnedTarget","Object","assign","total_results","movieFiltres","fetchApi","Genre","SortBy","Years","console","log","InfiniteScroll","nameScrolling","index","valueInput"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { API_KEY, PATH_BASE, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from '../../component/Utility/api'\n\n\n\nexport const movieBegin = () => {\n    return {\n        type: actionTypes.MOVIE_BEGIN\n    };\n};\n\n\nexport const movieSearchInput = (value,data,inputValue) => {\n    return {\n        type: actionTypes.MOVIE_SEARCH_INPUT,\n        movie: value,\n        data: data,\n        inputValue: inputValue\n\n    };\n};\n\nexport const moviePopular = (value) => {\n    return {\n        type: actionTypes.MOVIE_POPULAR,\n        movie: value\n    };\n};\n\n\n\nexport const InfiniteScrollMovie = (value, page) => {\n    return {\n        type: actionTypes.INFINITE_SCROLL,\n        movie: value,\n        page: page};\n}\n\nexport const movieFiltre = (value,filtreValue,data) => {\n    return {\n        type: actionTypes.MOVIE_FILTRE,\n        movie: value,\n        data: data,\n        filtreValue:filtreValue\n    };\n};\n\nexport const clearMovie = (error) => {\n    return {\n        type: actionTypes.CLEAR_MOVIE,\n        error: error\n    };\n};\n\nexport const pageInitial = () => {\n    return {\n        type: actionTypes.PAGE_INITIAL,\n    };\n};\n\n\nexport const movieShowDetail = (data,youtubeKey) => {\n    return {\n        type: actionTypes.MOVIE_DETAIL,\n        movieDetail: data,\n        youtubeKey_release: youtubeKey\n        \n    };\n};\n\nexport const movieFail = (error) => {\n    return {\n        type: actionTypes.MOVIE_FAIL,\n        error: error\n    };\n};\n\n\n\n\nexport const  movieSearch = (inputValue,idMovie) => {\n    return dispatch => {\n        dispatch(movieBegin());\n            if (inputValue === \"fetchDataPopular\"){\n                axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=1&include_adult=false`)\n                    .then(response => {\n                        //console.log('serchBUttun',response.data)\n                        dispatch(moviePopular(response.data.results))\n                    })\n                    .catch(err => {\n                        dispatch(movieFail(err))\n                       // console.log(err.response)\n                    })\n            }\n            else if (inputValue === \"showMovieDetail\"){\n                axios.get(`https://api.themoviedb.org/3/movie/${idMovie}?api_key=1e32f5c452c2267d5367589e9864ab1c&append_to_response=credits,videos,similar&language=fr&include_adult=false&vote_count.gte=200`)\n                    .then(response => {\n                        let date = { date: response.data.release_date.substr(0,4)}\n                        let youtube \n                        if (response.data.videos.results.length !== 0)\n                            youtube = {youtube: response.data.videos.results[0].key}\n                        const returnedTarget = Object.assign(date, youtube);\n                        dispatch(movieShowDetail(response.data,returnedTarget))\n                    })\n                    .catch(err => {\n                        dispatch(movieFail(err))\n                      //  console.log(err.response)\n                    })\n            }\n            else {\n                    axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}1${PATH_LANGUE}fr${PATH_ADULT}\"&query=${inputValue}&vote_count.gte=200`)\n                    .then(response => {\n                       // console.log('MovieSearchInput',response)\n    \n                        dispatch(movieSearchInput(response.data.results,response.data.total_results,inputValue))\n                    })\n                    .catch(err => {\n                        //console.log('eeeeee')\n                        dispatch(movieFail(err));\n                })\n            }\n                \n        }\n        \n};\n\nexport const movieFiltres = (filtreValue) => {\n    //conso le.log(filtreValue)\n    let fetchApi=`https://api.themoviedb.org/3/discover/movie?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&include_adult=false&vote_count.gte=200`\n\n    if (filtreValue.Genre.value) {fetchApi = fetchApi +`&with_genres=${filtreValue.Genre.value}`}\n   if  (filtreValue.SortBy.value) {fetchApi = fetchApi +`&sort_by=${filtreValue.SortBy.value}`}\n   if (filtreValue.Years.value) {fetchApi = fetchApi +`&primary_release_year=${filtreValue.Years.value}`}\n\n    return dispatch => {\n        dispatch(movieBegin());\n         axios.get(fetchApi)\n                    .then(response => {\n                        console.log('resposneFILTREEE', response)\n                        dispatch(movieFiltre(response.data.results,filtreValue,response.data.total_results))\n                    })\n                    .catch(err => {\n                        dispatch(movieFail(err))\n                        console.log('111',err.response)\n                    })\n        }      \n}\n\nexport const InfiniteScroll = (nameScrolling,index,valueInput,filtreValue) => {\n    //   console.log('filtreValue===>',filtreValue)\n     //console.log('iindex',index)\n    // console.log('value',valueInput)\n    // console.log('nameScrolling',nameScrolling);\n\n    let fetchApi=`https://api.themoviedb.org/3/discover/movie?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=${index}&include_adult=false&vote_count.gte=200`\n\n    if (filtreValue.Genre.value) {fetchApi = fetchApi +`&with_genres=${filtreValue.Genre.value}`}\n   if  (filtreValue.SortBy.value) {fetchApi = fetchApi +`&sort_by=${filtreValue.SortBy.value}`}\n   if (filtreValue.Years.value) {fetchApi = fetchApi +`&primary_release_year=${filtreValue.Years.value}`}\n\n\n    return dispatch => {\n        dispatch(movieBegin());\n        switch(nameScrolling){\n\n            case 'popular': axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=${index}&include_adult=false`)\n                .then(response => {\n                    // console.log('page ====',index)\n                    // console.log('reponse page',response)\n                    dispatch(InfiniteScrollMovie(response.data.results, index ))\n                })\n                .catch(err => {\n                    dispatch(movieFail(err))\n                    //console.log(err.response)\n                })\n                break;\n\n            case 'searchInput': axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${index}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${valueInput}&include_adult=false&vote_count.gte=200`)\n                .then(response => {\n                    // console.log('page ====',index)\n                    // console.log('reponse page',response)\n                    dispatch(InfiniteScrollMovie(response.data.results, index ))\n                })\n                .catch(err => {\n                    // console.log('eeeeee')\n                    dispatch(movieFail(err));\n                 })\n                 break;\n\n            case 'filtre':  \n                axios.get(fetchApi)\n                    .then(response => {\n                        // console.log('pageeee === ',index)\n                        // console.log('resposne', response)\n                        dispatch(InfiniteScrollMovie(response.data.results,index))\n                    })\n                    .catch(err => {\n                        dispatch(movieFail(err))\n                        //console.log(err.response)\n                    })\n                    break;\n                \n\n            default:\n               //  console.log(\"Type de recherche Inconnuuuuuuu\");\n        } \n    }    \n};"]},"metadata":{},"sourceType":"module"}